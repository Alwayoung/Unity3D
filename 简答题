1.解释对象与资源的区别于联系，根据官方案例，分别总结资源和对象组织的规则/规律
答：
    对象：直接出现在游戏的场景中，是资源整合的具体表现，对象一般有玩家、敌人、环境、摄像机和音乐等虚拟父类，这些父类本身没有实体，但他们的子类包含了游戏中会出现的对象。
    资源：资源可以被一个或多个对象使用。有些资源作为模板，可实例化成游戏中具体的对象。资源文件夹通常有对象、材质、场景、声音、预设、贴图、脚本、动作，在这些文件夹下可以继续划分。
2.下载几个游戏案例，分别总结资源、对象组织的结构（指资源的目录组织结构与游戏对象树的层次结构）
答：
    Assert资源目录：Scripts存放脚本代码，Prefabs存放预制，Textures/Icons存放小图标，，audio存放音频，animation存放动画，art存放美术用件，scence/environment存放环境对象。
    游戏对象目录：environment存放环境对象，player存放人物，goal存放终点，其他的交互对象与上述文件夹同级。
3.编写一个代码，使用 debug 语句来验证 MonoBehaviour 基本行为或事件触发的条件
答：
   以下是代码：
   public class NewBehaviourScript : MonoBehaviour {
    void Awake() {
        Debug.Log ("onAwake");
    }
    void Start () {
        Debug.Log ("onStart");
    }

    void Update () {
        Debug.Log ("onUpdate");
    }
    void FixedUpdate() {
        Debug.Log ("onFixedUpdate");
    }
    void LateUpdate() {
        Debug.Log ("onLateUpdate");
    }
    void OnGUI() {
        Debug.Log ("onGUI");
    }
    void Reset() {
        Debug.Log ("onReset");
    }
    void OnDisable() {
        Debug.Log ("onDisable");
    }
    void OnDestroy() {
        Debug.Log ("onDestroy");
    }
}

4.查找脚本手册，了解 GameObject，Transform，Component 对象
答：
   GameObject：游戏对象是Unity中表示游戏角色，游戏道具和游戏场景的基本对象。他们自身无法完成许多功能，但是他们构成了那些给予他们实体功能的组件的容器。
   Transform：转换组件决定了游戏场景中每个游戏对象的位置，旋转和缩放比例。每个游戏对象都有转换组件。
   Component: 组件是游戏中对象和行为的细节。它是每个游戏对象的功能部分。
   图片描述：
5.整理相关学习资料，编写简单代码验证以下技术的实现：
  查找对象：
      通过名字查找：public static GameObject Find(string name)
      通过标签查找单个对象：public static GameObject FindWithTag(string tag)
      通过标签查找多个对象：public static GameObject[] FindGameObjectsWithTag(string tag)
  添加子对象: public static GameObect CreatePrimitive(PrimitiveTypetype)
  遍历对象树:foreach (Transform child in transform) {};
  清除所有子对象: foreach (Transform child in transform){
                          Destroy(child.gameObject);
                          }
 6.资源预设（Prefabs）与 对象克隆 (clone)
   1）预设（Prefabs）有什么好处？
     答：预设资源储存了完整储存了对象的组件和属性，相当于模板，方便重复使用。
   2）预设与对象克隆 (clone or copy or Instantiate of Unity Object) 关系？
     答：预设与对象克隆不同的是，预设与实例化的对象有关联，而对象克隆本体和克隆出的对象是不相影响的。
   3）制作 table 预制，写一段代码将 table 预制资源实例化成游戏对象。
     答：GameObject anotherTable=(GameObject)Instantiate(table.gameObject);
7.尝试解释组合模式（Composite Pattern / 一种设计模式）。使用 BroadcastMessage() 方法
答：
   组合模式将对象组合成树形结构来表现”部分-整体“的层次结构，使得客户以一致的方式处理单个对象以及对象的组合。关键点在于简单对象和复合对象必须实现相同的接口。
  子对象方法：
          void recallMessage() {    
          print("Hello!");    
          } 
   父对象方法：
           void Start () {    
           this.BroadcastMessage("recallMessage");    
           }  
